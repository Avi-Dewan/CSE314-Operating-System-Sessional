diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..390e1a9 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -18,8 +18,8 @@ main()
     printf("\n");
     kinit();         // physical page allocator
     kvminit();       // create kernel page table
-    kvminithart();   // turn on paging
-    procinit();      // process table
+    kvminithart();   // turn on paging(->hardware)
+    procinit();      // process table(->important)
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
     plicinit();      // set up interrupt controller
@@ -28,7 +28,7 @@ main()
     iinit();         // inode table
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
-    userinit();      // first user process
+    userinit();      // first user process(->important)
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..1dbd5e9 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -228,7 +228,7 @@ uchar initcode[] = {
   0x00, 0x00, 0x00, 0x00
 };
 
-// Set up first user process.
+// Set up first user process. (important, running on cpu 0, initialization, watch the initcode)
 void
 userinit(void)
 {
@@ -239,6 +239,7 @@ userinit(void)
   
   // allocate one user page and copy initcode's instructions
   // and data into it.
+  //every process has a page table. Initializing it here
   uvmfirst(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
@@ -246,11 +247,12 @@ userinit(void)
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
 
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-  p->cwd = namei("/");
+  safestrcpy(p->name, "initcode", sizeof(p->name)); //just processs name. Only used to debug. No other functionalities
+  p->cwd = namei("/"); //current working directory
 
   p->state = RUNNABLE;
 
+
   release(&p->lock);
 }
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..f41e427 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -54,7 +54,7 @@ argraw(int n)
 
 // Fetch the nth 32-bit system call argument.
 void
-argint(int n, int *ip)
+ argint(int n, int *ip)
 {
   *ip = argraw(n);
 }
@@ -132,9 +132,9 @@ void
 syscall(void)
 {
   int num;
-  struct proc *p = myproc();
+  struct proc *p = myproc(); // myproc() returns the pointer of currently running process
 
-  num = p->trapframe->a7;
+  num = p->trapframe->a7; // we loaded the Syscall number in a7, trapframe-> contains the registers of the process
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..610fcee 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -56,7 +56,7 @@ sys_sleep(void)
 
   argint(0, &n);
   acquire(&tickslock);
-  ticks0 = ticks;
+  ticks0 = ticks; // 1 tick -> 0.1 seconds
   while(ticks - ticks0 < n){
     if(killed(myproc())){
       release(&tickslock);
